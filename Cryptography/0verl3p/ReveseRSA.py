from Crypto.Util.number import long_to_bytes
import random
import math

# Given data
N = 18909558900895372672156824811256265991045063590569226191232596663778841681897127254948673384177564949258183981733845039930038021269357172312824082512373461836016350485677617488414637304277231253190262393267785594036484291990305836587795696393789682736379072984234903176904595412028705422757031938515174955122139225813788578454554534920388492258873319280552513284340011592837218450406177853876475453942250479834504622472801073857140934073199654193170101024653069855430546354617875613752042483103556896551326630710625617338594124873967949453649106318872176809724548259100966707725474321152035379845934513208799372680981
d = 6687607858232036068102764628763869770365480322599654007055390473672368166120078970889731780497544904312162417086944174061956166089097159465136283083934145573266810680333793401383561399492464805933196541665940377169806871229249258898514253795798667416326565964700803909765395310435346968714809745195915667635297064990795636997497174353498801451968512519467684250340907454722122526744868301815309377979214139209924022710213407189093358499791347140504060386679433394906044887470451126139251537410999047504158074154840567036307276609901744175974470733352724690467371739007984796402241006187231818157691483372021327246081
keys = [(N, 47041), (N, 43997), (N, 64327), (N, 61091), (N, 41333), (N, 43753), (N, 49297), (N, 60859), (N, 62549), (N, 61603)]
cipher = 17645273145351275595525807073989050948965947318364568960587912808565753550868679400761129493639312107881718704399079296084071662498685695737565304759095440251260751277410423164152439238058543479248616726569219754716569949310088729774754396896206740072798713368055282255138359044165511083329692314841881710654928579684619972781423759855118466981710663456827148741309715289690086375657132843333725276700434878544086599889531450088127607426279698041000280210449286322740624514005407432190062616631972904127404246574154910765957984452167524351965862221718745754696108925882968967217857798769220085678518029334502303515802

# Step 1: Factorize N using (e, d)
e0 = 65537
k = e0 * d - 1

# Factor out powers of 2
t = 0
s = k
while s % 2 == 0:
    t += 1
    s //= 2

# Find factors
p, q = None, None
max_attempts = 100
for _ in range(max_attempts):
    a = random.randint(2, N - 2)
    if math.gcd(a, N) > 1:
        p = math.gcd(a, N)
        q = N // p
        break
    x = pow(a, s, N)
    if x == 1 or x == N - 1:
        continue
    for _ in range(t - 1):
        y = pow(x, 2, N)
        if y == 1:
            p = math.gcd(x - 1, N)
            q = N // p
            break
        x = y
        if x == N - 1:
            break
    if p is not None:
        break

# Step 2: Compute phi(N)
phiN = (p - 1) * (q - 1)

# Step 3: Compute E (product of all exponents)
exponents = [key[1] for key in keys]
E = 1
for exp in exponents:
    E *= exp

# Step 4: Compute d_E = E^{-1} mod phi(N)
d_E = pow(E, -1, phiN)

# Step 5: Decrypt the ciphertext
flag_long = pow(cipher, d_E, N)
flag = long_to_bytes(flag_long).decode()

print(flag)